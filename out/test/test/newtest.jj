/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. newtest.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = false;
  IGNORE_CASE=true;
  lookahead = 1;
}

PARSER_BEGIN(MultiSQLPaser)
package test;

public class MultiSQLPaser/*@bgen(jjtree)*/implements MultiSQLPaserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMultiSQLPaserState jjtree = new JJTMultiSQLPaserState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
  while(true){
    System.out.println("Reading from standard input...");
    MultiSQLPaser p = new MultiSQLPaser(System.in);
    try
    {
        SimpleNode n = p.Start();
        n.dump("");
        System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    }
  }
}

PARSER_END(MultiSQLPaser)

/*\u7039\u6c2b\u7b9f\u7487\u5d86\u7876\u9352\u55d8\u703d*/

SKIP :
{
  " "
}

SKIP :
{
  "\n"
| "\r"
| "\r\n"
}

TOKEN : /*\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd*/
{
  < SELECT : "Select" >
| < WHERE : "where" >
| < FROM : "from" >
| < JOIN : "Join" >
| < LIKE : "like" >
| < GROUP : "group" >
| < ORDER : "order" >
| < BY : "by" >
| < VALUES : "values" >
| < AND : "and" >
| < OR : "or" >
| < AS : "as" >
| < IN : "in" >
| < COUNT : "count" >
| < SUM : "sum" >
| < AVG : "avg" >
| < MAX : "max" >
| < MIN : "min" >
| < BETWEEN : "between" >
| < INIT : "init" >
| < RULE : "rule" >
| < MATCH : "match" >
| < LIST : "list" >
}

TOKEN : /*\u7039\u6c2b\u7b9f\u7ed7\ufe40\u5f7f*/
{
  < UNDERSCORE : "_" >
| < COMMA : "," >
| < POINT : "." >
| < SEMICOLON : ";" >
| < ALL : "*" >
| < NEG : "-" >
| < LEFTPARENTHESES : "(" >
| < RIGHTPARENTHESES : ")" >
| < EQUAL : "=" >
| < LQUOTATION : "'" >
| < LEFTQUOTATION : "\"" >
| < HIGHER : ">" >
| < LOWER : "< " >
| < EHIGHER : ">=" >
| < ELOWER : "<=" >
| < LEFTREL : "<-" >
| < RIGHTREL : "->" >
| < LEFTPAREN : "{" >
| < RIGHTPAREN : "}" >
| < COLON : ":" >
| < LEFTBRACKET : "[" >
| < RIGHTBRACKET : "]" >
}

TOKEN : /* \u7039\u6c2b\u7b9f\u93c1\u5b58\u669f */
{
  < INTEGER_LITERAL : [ "1"-"9" ] (< DIGIT >)* >
| < FLOAT_LITERAL : [ "1"-"9" ] (< DIGIT >)* < POINT > (< DIGIT >)* >
| < STRDIGITS : "0" (< DIGIT >)* >
}

TOKEN : /*\u7039\u6c2b\u7b9f\u93c1\u677f\u74e7*/
{
  < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
  < IDENTIFIER :
    < LETTER >
  | < LETTER > < DIGIT >
  | (< DIGIT >)+
  | (< LETTER >)+
  | < LEFTQUOTATION >
          ( < LETTER >
          | < DIGIT >
          | < UNDERSCORE >
          )*
          < LEFTQUOTATION >
  | < LETTER >
    (
      < LETTER >
    | < DIGIT >
    | < UNDERSCORE >
    )*
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

//TOKEN : /* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
//{
//  < IDENTIFIER :
//    < LETTER >
//  | < LETTER > < DIGIT >
//  | (< LETTER >)+
//  | (< LETTER >)+ < POINT > (< LETTER >)+
//  | < LETTER > < POINT > (< DIGIT >)+
//  | (< DIGIT >)+
//  | < LEFTQUOTATION >
//      ( < LETTER >
//      | < DIGIT >
//      | < UNDERSCORE >
//      )*
//      < LEFTQUOTATION >
//
//  | < LETTER >
//    (
//      < LETTER >
//    | (< DIGIT >)+
//    | < UNDERSCORE >
//    )*
//    (
//      < LETTER >
//    | < DIGIT >
//    )+ >
//| < #LETTER : [ "a"-"z", "A"-"Z" ] >
//}

/* \u7487\ue15f\u7876\u7459\uff46\u703d*/

//String Start() :
//{ String result;}
//{
//  result = Query()
//  {s = result;}
//  {
//    return result;
//  }
//}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Graphcon() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  SingleAttGraSFW()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//
void Query() :
{/*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  SFW() [ SUFFIX() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//
////
void SUFFIX() :
{/*@bgen(jjtree) SUFFIX */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SUFFIX */
  try {
/*@egen*/
  < ORDER > < BY > Attribute()
| < GROUP > < BY > Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//



void SFW() :
{/*@bgen(jjtree) SFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SFW */
  try {
/*@egen*/
  < SELECT > SelectList() [ Fromclause() ][ JoinCell() ] [ < WHERE > Conditions() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



//
void SingleAttSFW() :
{/*@bgen(jjtree) SingleAttSFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLEATTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleAttSFW */
  try {
/*@egen*/
  < SELECT > Relation() [ < POINT > (Attribute()| < ALL >) ] [ Fromclause() ] [ JoinCell() ] [ < WHERE > Conditions() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SingleAttGraSFW() :
{/*@bgen(jjtree) SingleAttGraSFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLEATTGRASFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleAttGraSFW */
  try {
/*@egen*/
  < SELECT > Path() [ Fromclause() ] [ < WHERE > Gramatch() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//
void SelectList() :
{/*@bgen(jjtree) SelectList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectList */
  try {
/*@egen*/
  SelectItem()
  [
    (
      < COMMA > SelectItem()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



//
void SelectItem() :
{/*@bgen(jjtree) SelectItem */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectItem */
  try {
/*@egen*/
  Relation() [ < POINT > (Attribute()| < ALL >) ]
| Func() < LEFTPARENTHESES > Relation() [ < POINT > (Attribute()| < ALL >) ] < RIGHTPARENTHESES > [ < AS > Attribute() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




//
void JoinCell() :
{/*@bgen(jjtree) JoinCell */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINCELL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinCell */
  try {
/*@egen*/
  < JOIN > Joinname() < LEFTPARENTHESES > JoinAttrCondition() < RIGHTPARENTHESES > JoinItemList() [ JoinEquCondition() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



//
void JoinItemList() :
{/*@bgen(jjtree) JoinItemList */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinItemList */
  try {
/*@egen*/
  JoinItem()
  [
    (
      < COMMA > JoinItem()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//
void JoinAttrCondition() :
{/*@bgen(jjtree) JoinAttrCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINATTRCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinAttrCondition */
  try {
/*@egen*/
  EquCondition()
  [
    (
      < COMMA > EquCondition()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//
void EquCondition() :
{/*@bgen(jjtree) EquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EquCondition */
  try {
/*@egen*/
  Attribute() < EQUAL > Relation() [ < POINT > Attribute() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//
void JoinItem() :
{/*@bgen(jjtree) JoinItem */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinItem */
  try {
/*@egen*/
  Relation()
| SingleAttSFW()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



//
void JoinEquCondition() :
{/*@bgen(jjtree) JoinEquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinEquCondition */
  try {
/*@egen*/
  Relation() < POINT > Attribute() < EQUAL > Relation() < POINT > Attribute()
  [
    (
      < AND > Relation() < POINT > Attribute() < EQUAL > Relation() < POINT > Attribute()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//
void Func() :
{/*@bgen(jjtree) Func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
  try {
/*@egen*/
  < COUNT >
| < SUM >
| < AVG >
| < MAX >
| < MIN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Conditions() :
{/*@bgen(jjtree) Conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conditions */
  try {
/*@egen*/
  Condition()
  [
    (
      < AND > Condition()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Condition() :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  Relation() [ < POINT > Attribute() ] Action()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}





void Action() :
{/*@bgen(jjtree) Action */
  SimpleNode jjtn000 = new SimpleNode(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Action */
  try {
/*@egen*/
  < EQUAL > Equal()
| < BETWEEN > Between() < AND > Between()
| < IN > < LEFTPARENTHESES > In() < RIGHTPARENTHESES >
| < HIGHER > Higher()
| < LOWER > Lower()
| < EHIGHER > Higher()
| < ELOWER > Lower()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//

void Gramatch() :
{/*@bgen(jjtree) Gramatch */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAMATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Gramatch */
  try {
/*@egen*/
  Relation() < POINT > Attribute() < LEFTPARENTHESES > Graphcon() < RIGHTPARENTHESES >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Graphcon() :
{/*@bgen(jjtree) Graphcon */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPHCON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Graphcon */
  try {
/*@egen*/
  Graob()
  [
      (
          Arrow() Graob()
      )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Graob() :
{/*@bgen(jjtree) Graob */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Graob */
  try {
/*@egen*/
  Relation() < COLON > [ < LEFTPAREN > ] Object() [ < RIGHTPAREN > ]
| Relation() < COLON > triple()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Matchob() :
{/*@bgen(jjtree) Matchob */
  SimpleNode jjtn000 = new SimpleNode(JJTMATCHOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Matchob */
    try {
/*@egen*/
    Relation() < COLON > Listob()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Listob() :
{/*@bgen(jjtree) Listob */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Listob */
    try {
/*@egen*/
    < LIST > Anglebracket() < LEFTPAREN > Object()
    [
        (
            < COMMA > Object()
        )+
    ]
    < RIGHTPAREN > Anglebracket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Object() :
{/*@bgen(jjtree) Object */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Object */
  try {
/*@egen*/
  Attribute() < COLON >  triple()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void triple() :
{/*@bgen(jjtree) triple */
  SimpleNode jjtn000 = new SimpleNode(JJTTRIPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) triple */
  try {
/*@egen*/
  < LEFTPAREN > [ Attribute() ] [ < COMMA > ] [ Attribute() |  Compare() ] [ < COMMA > ] [ Attribute() ] < RIGHTPAREN >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Path() :
{/*@bgen(jjtree) Path */
  SimpleNode jjtn000 = new SimpleNode(JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Path */
 try {
/*@egen*/
 Relation()
 [
    (
        < POINT > Attribute()
    )+
 ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Fromclause() :
{/*@bgen(jjtree) Fromclause */
  SimpleNode jjtn000 = new SimpleNode(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fromclause */
  try {
/*@egen*/
  < FROM > Relation()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Equal() :
{/*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equal */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()
| Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Between() :
{/*@bgen(jjtree) Between */
  SimpleNode jjtn000 = new SimpleNode(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Between */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//
void In() :
{/*@bgen(jjtree) In */
  SimpleNode jjtn000 = new SimpleNode(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) In */
  try {
/*@egen*/
  SFW()
| < LQUOTATION > IDENTIFIER() < LQUOTATION >
  [
    (
      < COMMA > < LQUOTATION > IDENTIFIER() < LQUOTATION >
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Anglebracket() :
{/*@bgen(jjtree) Anglebracket */
  SimpleNode jjtn000 = new SimpleNode(JJTANGLEBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Anglebracket */
    try {
/*@egen*/
    < HIGHER >
  | < LOWER >/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arrow() :
{/*@bgen(jjtree) Arrow */
  SimpleNode jjtn000 = new SimpleNode(JJTARROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arrow */
  try {
/*@egen*/
  < LEFTREL >
| < RIGHTREL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Higher() :
{/*@bgen(jjtree) Higher */
  SimpleNode jjtn000 = new SimpleNode(JJTHIGHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Higher */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Lower() :
{/*@bgen(jjtree) Lower */
  SimpleNode jjtn000 = new SimpleNode(JJTLOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lower */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//
///*-------------------*/

/*-------------------*/
void Joinname() :
{/*@bgen(jjtree) Joinname */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Joinname */
  try {
/*@egen*/
  Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Attribute() :
{/*@bgen(jjtree) Attribute */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
  try {
/*@egen*/
  IDENTIFIER()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Relation() :
{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
  try {
/*@egen*/
  IDENTIFIER()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Pattern() :
{/*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/
  < LQUOTATION >
  (
    IDENTIFIER()
  | < STRDIGITS >
  )
  < LQUOTATION >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Compare() :
{/*@bgen(jjtree) Compare */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Compare */
  try {
/*@egen*/
  < EQUAL >
| < HIGHER >
| < LOWER >
| < EHIGHER >
| < ELOWER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*-------------------*/
void IDENTIFIER() :
{/*@bgen(jjtree) IDENTIFIER */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
  try {
/*@egen*/
  < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


