/* Generated By:JJTree&JavaCC: Do not edit this line. MultiSQLPaser.java */
package test;

public class MultiSQLPaser/*@bgen(jjtree)*/implements MultiSQLPaserTreeConstants, MultiSQLPaserConstants {/*@bgen(jjtree)*/
  protected JJTMultiSQLPaserState jjtree = new JJTMultiSQLPaserState();public static void main(String args []) throws ParseException
  {
  while(true){
    System.out.println("Reading from standard input...");
    MultiSQLPaser p = new MultiSQLPaser(System.in);
    try
    {
        SimpleNode n = p.Start();
        n.dump("");
        System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    }
  }

//TOKEN : /* ÂÆö‰πâÊ†áËØÜÁ¨? */
//{
//  < IDENTIFIER :
//    < LETTER >
//  | < LETTER > < DIGIT >
//  | (< LETTER >)+
//  | (< LETTER >)+ < POINT > (< LETTER >)+
//  | < LETTER > < POINT > (< DIGIT >)+
//  | (< DIGIT >)+
//  | < LEFTQUOTATION >
//      ( < LETTER >
//      | < DIGIT >
//      | < UNDERSCORE >
//      )*
//      < LEFTQUOTATION >
//
//  | < LETTER >
//    (
//      < LETTER >
//    | (< DIGIT >)+
//    | < UNDERSCORE >
//    )*
//    (
//      < LETTER >
//    | < DIGIT >
//    )+ >
//| < #LETTER : [ "a"-"z", "A"-"Z" ] >
//}

/* ËØ≠Ê≥ïËß£Êûê*/

//String Start() :
//{ String result;}
//{
//  result = Query()
//  {s = result;}
//  {
//    return result;
//  }
//}
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Query();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void Query() throws ParseException {
 /*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SFW();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case ORDER:
        SUFFIX();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
////
  final public void SUFFIX() throws ParseException {
 /*@bgen(jjtree) SUFFIX */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        jj_consume_token(ORDER);
        jj_consume_token(BY);
        Attribute();
        break;
      case GROUP:
        jj_consume_token(GROUP);
        jj_consume_token(BY);
        Attribute();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void SFW() throws ParseException {
 /*@bgen(jjtree) SFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      SelectList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        Fromclause();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        JoinSingle();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        Conditions();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void SingleAttSFW() throws ParseException {
 /*@bgen(jjtree) SingleAttSFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLEATTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        Fromclause();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        JoinSingle();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        Conditions();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//void SingleAttGraSFW() :
//{}
//{
//  < SELECT > Path() [ Fromclause() ] [ < WHERE > Gramatch() ]
//}

//
  final public void SelectList() throws ParseException {
 /*@bgen(jjtree) SelectList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_1:
        while (true) {
          jj_consume_token(COMMA);
          SelectItem();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_1;
          }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void SelectItem() throws ParseException {
 /*@bgen(jjtree) SelectItem */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINT:
          jj_consume_token(POINT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALL:
            jj_consume_token(ALL);
            break;
          case IDENTIFIER:
            Path();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      case LEFTPAREN:
        Joinrule();
        break;
      case COUNT:
      case SUM:
      case AVG:
      case MAX:
      case MIN:
        Func();
        jj_consume_token(LEFTPARENTHESES);
        Relation();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINT:
          jj_consume_token(POINT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Attribute();
            break;
          case ALL:
            jj_consume_token(ALL);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTPARENTHESES);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          Attribute();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void JoinCell() throws ParseException {
 /*@bgen(jjtree) JoinCell */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINCELL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JOIN);
      Joinname();
      jj_consume_token(LEFTPARENTHESES);
      JoinAttrCondition();
      jj_consume_token(RIGHTPARENTHESES);
      JoinItemList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        JoinEquCondition();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JoinSingle() throws ParseException {
 /*@bgen(jjtree) JoinSingle */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINSINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JOIN);
      JoinItemList();
      jj_consume_token(RULE);
      Joinrule();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        JoinEquCondition();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Joinrule() throws ParseException {
 /*@bgen(jjtree) Joinrule */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN);
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        Attribute();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        doc();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_2:
        while (true) {
          jj_consume_token(COMMA);
          Relation();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POINT:
            jj_consume_token(POINT);
            Attribute();
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
            jj_consume_token(COLON);
            doc();
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void doc() throws ParseException {
 /*@bgen(jjtree) doc */
  SimpleNode jjtn000 = new SimpleNode(JJTDOC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(LEFTPAREN);
      Relation();
      jj_consume_token(POINT);
      Attribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_3:
        while (true) {
          jj_consume_token(COMMA);
          Relation();
          jj_consume_token(POINT);
          Attribute();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
      jj_consume_token(RIGHTBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
  final public void JoinItemList() throws ParseException {
 /*@bgen(jjtree) JoinItemList */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JoinItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_4:
        while (true) {
          jj_consume_token(COMMA);
          JoinItem();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_4;
          }
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void JoinAttrCondition() throws ParseException {
 /*@bgen(jjtree) JoinAttrCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINATTRCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EquCondition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_5:
        while (true) {
          jj_consume_token(COMMA);
          EquCondition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_5;
          }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void EquCondition() throws ParseException {
 /*@bgen(jjtree) EquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
      jj_consume_token(EQUAL);
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        Attribute();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void JoinItem() throws ParseException {
 /*@bgen(jjtree) JoinItem */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        break;
      case SELECT:
        SingleAttSFW();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void JoinEquCondition() throws ParseException {
 /*@bgen(jjtree) JoinEquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relation();
      jj_consume_token(POINT);
      Attribute();
      jj_consume_token(EQUAL);
      Relation();
      jj_consume_token(POINT);
      Attribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        label_6:
        while (true) {
          jj_consume_token(AND);
          Relation();
          jj_consume_token(POINT);
          Attribute();
          jj_consume_token(EQUAL);
          Relation();
          jj_consume_token(POINT);
          Attribute();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_6;
          }
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void Func() throws ParseException {
 /*@bgen(jjtree) Func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        jj_consume_token(COUNT);
        break;
      case SUM:
        jj_consume_token(SUM);
        break;
      case AVG:
        jj_consume_token(AVG);
        break;
      case MAX:
        jj_consume_token(MAX);
        break;
      case MIN:
        jj_consume_token(MIN);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Conditions() throws ParseException {
 /*@bgen(jjtree) Conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        label_7:
        while (true) {
          jj_consume_token(AND);
          Condition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_7;
          }
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case MATCH:
          jj_consume_token(MATCH);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPARENTHESES:
        jj_consume_token(LEFTPARENTHESES);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case BETWEEN:
      case EQUAL:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
        Action();
        break;
      case LEFTPAREN:
        Blogmatch();
        break;
      default:
        jj_la1[42] = jj_gen;
        Graphcon();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHTPARENTHESES:
        jj_consume_token(RIGHTPARENTHESES);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Action() throws ParseException {
 /*@bgen(jjtree) Action */
  SimpleNode jjtn000 = new SimpleNode(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        Equal();
        break;
      case BETWEEN:
        jj_consume_token(BETWEEN);
        Between();
        jj_consume_token(AND);
        Between();
        break;
      case IN:
        jj_consume_token(IN);
        jj_consume_token(LEFTPARENTHESES);
        In();
        jj_consume_token(RIGHTPARENTHESES);
        break;
      case HIGHER:
        jj_consume_token(HIGHER);
        Higher();
        break;
      case LOWER:
        jj_consume_token(LOWER);
        Lower();
        break;
      case EHIGHER:
        jj_consume_token(EHIGHER);
        Higher();
        break;
      case ELOWER:
        jj_consume_token(ELOWER);
        Lower();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//

//void Gramatch() :
//{}
//{
//  Relation() < POINT > Attribute() < LEFTPARENTHESES > Graphcon() < RIGHTPARENTHESES >
//}

//void Gramatch() :
//{}
//{
//  < LEFTPARENTHESES > Graphcon() < RIGHTPARENTHESES >
//}
  final public void Graphcon() throws ParseException {
 /*@bgen(jjtree) Graphcon */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPHCON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Graob();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTREL:
      case RIGHTREL:
        label_8:
        while (true) {
          Arrow();
          Graob();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFTREL:
          case RIGHTREL:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_8;
          }
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Graob() throws ParseException {
 /*@bgen(jjtree) Graob */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        jj_consume_token(LEFTPAREN);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case IDENTIFIER:
        Object();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHTPAREN:
        jj_consume_token(RIGHTPAREN);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Blogmatch() throws ParseException {
 /*@bgen(jjtree) Blogmatch */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOGMATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN);
      Matchcon();
      jj_consume_token(RIGHTPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Matchcon() throws ParseException {
 /*@bgen(jjtree) Matchcon */
  SimpleNode jjtn000 = new SimpleNode(JJTMATCHCON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Matchob();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_9:
        while (true) {
          jj_consume_token(COMMA);
          Matchob();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_9;
          }
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Matchob() throws ParseException {
 /*@bgen(jjtree) Matchob */
  SimpleNode jjtn000 = new SimpleNode(JJTMATCHOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIST:
        Listob();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
      case IDENTIFIER:
        Object();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Listob() throws ParseException {
 /*@bgen(jjtree) Listob */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTOB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LIST);
      Anglebracket();
      jj_consume_token(LEFTPAREN);
      Object();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_10:
        while (true) {
          jj_consume_token(COMMA);
          Object();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_10;
          }
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
      Anglebracket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Object() throws ParseException {
 /*@bgen(jjtree) Object */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Attribute();
        jj_consume_token(COLON);
        option();
        break;
      case LEFTPAREN:
        option();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void triple() throws ParseException {
 /*@bgen(jjtree) triple */
  SimpleNode jjtn000 = new SimpleNode(JJTTRIPLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case EQUAL:
      case LQUOTATION:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case AND:
        case OR:
        case EQUAL:
        case HIGHER:
        case LOWER:
        case EHIGHER:
        case ELOWER:
          Compare();
          break;
        case LQUOTATION:
          Pattern();
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case EQUAL:
      case LQUOTATION:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case AND:
        case OR:
        case EQUAL:
        case HIGHER:
        case LOWER:
        case EHIGHER:
        case ELOWER:
          Compare();
          break;
        case LQUOTATION:
          Pattern();
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case EQUAL:
      case LQUOTATION:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case AND:
        case OR:
        case EQUAL:
        case HIGHER:
        case LOWER:
        case EHIGHER:
        case ELOWER:
          Compare();
          break;
        case LQUOTATION:
          Pattern();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void option() throws ParseException {
 /*@bgen(jjtree) option */
  SimpleNode jjtn000 = new SimpleNode(JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case EQUAL:
      case LQUOTATION:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case AND:
        case OR:
        case EQUAL:
        case HIGHER:
        case LOWER:
        case EHIGHER:
        case ELOWER:
          Compare();
          break;
        case LQUOTATION:
          Pattern();
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case EQUAL:
      case LQUOTATION:
      case HIGHER:
      case LOWER:
      case EHIGHER:
      case ELOWER:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case AND:
        case OR:
        case EQUAL:
        case HIGHER:
        case LOWER:
        case EHIGHER:
        case ELOWER:
          Compare();
          break;
        case LQUOTATION:
          Pattern();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Path() throws ParseException {
 /*@bgen(jjtree) Path */
  SimpleNode jjtn000 = new SimpleNode(JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        label_11:
        while (true) {
          jj_consume_token(POINT);
          Attribute();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POINT:
            ;
            break;
          default:
            jj_la1[72] = jj_gen;
            break label_11;
          }
        }
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Fromclause() throws ParseException {
 /*@bgen(jjtree) Fromclause */
  SimpleNode jjtn000 = new SimpleNode(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FROM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Equal() throws ParseException {
 /*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      case IDENTIFIER:
        Attribute();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Between() throws ParseException {
 /*@bgen(jjtree) Between */
  SimpleNode jjtn000 = new SimpleNode(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void In() throws ParseException {
 /*@bgen(jjtree) In */
  SimpleNode jjtn000 = new SimpleNode(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SFW();
        break;
      case LQUOTATION:
        jj_consume_token(LQUOTATION);
        IDENTIFIER();
        jj_consume_token(LQUOTATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          label_12:
          while (true) {
            jj_consume_token(COMMA);
            jj_consume_token(LQUOTATION);
            IDENTIFIER();
            jj_consume_token(LQUOTATION);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[77] = jj_gen;
              break label_12;
            }
          }
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Anglebracket() throws ParseException {
 /*@bgen(jjtree) Anglebracket */
  SimpleNode jjtn000 = new SimpleNode(JJTANGLEBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HIGHER:
        jj_consume_token(HIGHER);
        break;
      case LOWER:
        jj_consume_token(LOWER);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Arrow() throws ParseException {
 /*@bgen(jjtree) Arrow */
  SimpleNode jjtn000 = new SimpleNode(JJTARROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTREL:
        jj_consume_token(LEFTREL);
        break;
      case RIGHTREL:
        jj_consume_token(RIGHTREL);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Higher() throws ParseException {
 /*@bgen(jjtree) Higher */
  SimpleNode jjtn000 = new SimpleNode(JJTHIGHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Lower() throws ParseException {
 /*@bgen(jjtree) Lower */
  SimpleNode jjtn000 = new SimpleNode(JJTLOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
///*-------------------*/

/*-------------------*/
  final public void Joinname() throws ParseException {
 /*@bgen(jjtree) Joinname */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IDENTIFIER();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Relation() throws ParseException {
 /*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IDENTIFIER();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Pattern() throws ParseException {
 /*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LQUOTATION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        IDENTIFIER();
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case STRDIGITS:
        jj_consume_token(STRDIGITS);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LQUOTATION);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Compare() throws ParseException {
 /*@bgen(jjtree) Compare */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case HIGHER:
        jj_consume_token(HIGHER);
        break;
      case LOWER:
        jj_consume_token(LOWER);
        break;
      case EHIGHER:
        jj_consume_token(EHIGHER);
        break;
      case ELOWER:
        jj_consume_token(ELOWER);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*-------------------*/
  final public void IDENTIFIER() throws ParseException {
 /*@bgen(jjtree) IDENTIFIER */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /** Generated Token Manager. */
  public MultiSQLPaserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc00,0xc00,0x80,0x100,0x40,0x0,0x80000000,0x80,0x100,0x40,0x40000000,0x40000000,0x0,0x80000000,0x0,0x80000000,0x10000,0x7c0000,0x0,0x10000000,0x80000000,0x0,0x80000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x80000000,0x20,0x4000,0x4000,0x7c0000,0x4000,0x4000,0x4000000,0x80000000,0x0,0x820000,0x0,0x820000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x8000000,0x0,0x40000000,0x40000000,0x0,0xc000,0xc000,0x40000000,0xc000,0xc000,0x40000000,0xc000,0xc000,0xc000,0xc000,0x40000000,0xc000,0xc000,0x80000000,0x80000000,0x0,0x0,0x0,0x40000000,0x40000000,0x20,0x0,0x0,0x0,0x0,0x0,0xc000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1000002,0x0,0x0,0x0,0x0,0x0,0x0,0x1000002,0x0,0x1000002,0x0,0x0,0x1004000,0x1000000,0x0,0x0,0x10000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x8,0x4f20,0x10,0xf20,0x3000,0x3000,0x1000000,0x4000,0x1004000,0x8000,0x0,0x0,0x1000000,0x0,0x1004000,0x0,0x0,0x1004000,0x1000f60,0x1000f60,0x0,0x1000f60,0x1000f60,0x0,0x1000f60,0x1000f60,0x1000f60,0x1000f60,0x0,0x1000f60,0x1000f60,0x0,0x0,0x1000000,0x1380040,0x380040,0x0,0x0,0x40,0x300,0x3000,0x380040,0x380040,0x1500000,0xf20,};
   }

  /** Constructor with InputStream. */
  public MultiSQLPaser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MultiSQLPaser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MultiSQLPaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MultiSQLPaser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MultiSQLPaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MultiSQLPaser(MultiSQLPaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MultiSQLPaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
