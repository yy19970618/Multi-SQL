/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. test.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = false;
  IGNORE_CASE=true;
  lookahead = 1;
}

PARSER_BEGIN(MultiSQLPaser)
package test;

public class MultiSQLPaser/*@bgen(jjtree)*/implements MultiSQLPaserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMultiSQLPaserState jjtree = new JJTMultiSQLPaserState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
  while(true){
    System.out.println("Reading from standard input...");
    MultiSQLPaser p = new MultiSQLPaser(System.in);
    try
    {
        SimpleNode n = p.Start();
        n.dump("");
        System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    }
  }
}

PARSER_END(MultiSQLPaser)

/*\u7039\u6c2b\u7b9f\u7487\u5d86\u7876\u9352\u55d8\u703d*/

SKIP :
{
  " "
}

SKIP :
{
  "\n"
| "\r"
| "\r\n"
}

TOKEN : /*\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd*/
{
  < SELECT : "Select" >
| < WHERE : "where" >
| < JOIN : "Join" >
| < LIKE : "like" >
| < GROUP : "group" >
| < ORDER : "order" >
| < BY : "by" >
| < VALUES : "values" >
| < AND : "and" >
| < OR : "or" >
| < AS : "as" >
| < IN : "in" >
| < COUNT : "count" >
| < SUM : "sum" >
| < AVG : "avg" >
| < MAX : "max" >
| < MIN : "min" >
| < BETWEEN : "between" >
}

TOKEN : /*\u7039\u6c2b\u7b9f\u7ed7\ufe40\u5f7f*/
{
  < UNDERSCORE : "_" >
| < COMMA : "," >
| < POINT : "." >
| < SEMICOLON : ";" >
| < ALL : "*" >
| < NEG : "-" >
| < LEFTPARENTHESES : "(" >
| < RIGHTPARENTHESES : ")" >
| < EQUAL : "=" >
| < LQUOTATION : "'" >
| < LEFTQUOTATION : "\"" >
| < HIGHER : ">" >
| < LOWER : "< " >
| < EHIGHER : ">=" >
| < ELOWER : "<=" >
}

TOKEN : /* \u7039\u6c2b\u7b9f\u93c1\u5b58\u669f */
{
  < INTEGER_LITERAL : [ "1"-"9" ] (< DIGIT >)* >
| < FLOAT_LITERAL : [ "1"-"9" ] (< DIGIT >)* < POINT > (< DIGIT >)* >
| < STRDIGITS : "0" (< DIGIT >)* >
}

TOKEN : /*\u7039\u6c2b\u7b9f\u93c1\u677f\u74e7*/
{
  < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
{
  < IDENTIFIER :
    < LETTER >
  | < LETTER > < DIGIT >
  | (< DIGIT >)+
  | (< LETTER >)+
  | < LEFTQUOTATION >
          ( < LETTER >
          | < DIGIT >
          | < UNDERSCORE >
          )*
          < LEFTQUOTATION >
  | < LETTER >
    (
      < LETTER >
    | < DIGIT >
    | < UNDERSCORE >
    )*
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

//TOKEN : /* \u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd */
//{
//  < IDENTIFIER :
//    < LETTER >
//  | < LETTER > < DIGIT >
//  | (< LETTER >)+
//  | (< LETTER >)+ < POINT > (< LETTER >)+
//  | < LETTER > < POINT > (< DIGIT >)+
//  | (< DIGIT >)+
//  | < LEFTQUOTATION >
//      ( < LETTER >
//      | < DIGIT >
//      | < UNDERSCORE >
//      )*
//      < LEFTQUOTATION >
//
//  | < LETTER >
//    (
//      < LETTER >
//    | (< DIGIT >)+
//    | < UNDERSCORE >
//    )*
//    (
//      < LETTER >
//    | < DIGIT >
//    )+ >
//| < #LETTER : [ "a"-"z", "A"-"Z" ] >
//}

/* \u7487\ue15f\u7876\u7459\uff46\u703d*/

//String Start() :
//{ String result;}
//{
//  result = Query()
//  {s = result;}
//  {
//    return result;
//  }
//}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Query()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String Expression() :
//{String i,s;}
//{
//    i = Query()
//    {s = i;}
//    {return s;}
//}
//
void Query() :
{/*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  SFW() [ SUFFIX() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String Query():
//{String i, j,s;}
//{
//    i = SFW()
//    {s = i;}
//    [
//        j = SUFFIX()
//        {s = s + j;}
//    ]
//    {return s;}
//}
//
////
void SUFFIX() :
{/*@bgen(jjtree) SUFFIX */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SUFFIX */
  try {
/*@egen*/
  < ORDER > < BY > Attribute()
| < GROUP > < BY > Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//

//String SUFFIX() :
//{Token t,p; String i,s;}
//{
//    t = < ORDER > p = < BY > i = Attribute()
//    {s = t.image + p.image + i;}
//    {return s;}
//    | t = < GROUP > p = < BY > i = Attribute()
//          {s = t.image + p.image + i;}
//          {return s;}
//}

void SFW() :
{/*@bgen(jjtree) SFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SFW */
  try {
/*@egen*/
  < SELECT > SelectList() [ JoinCell() ] [ < WHERE > Conditions() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String SFW() :
//{Token t; String i,s;}
//{
//    t = < SELECT > i = SelectList()
//    {s = t.image + i;}
//    [ i = JoinCell() {s = s + i;} ]
//    [ t = < WHERE > i = Conditions() {s = s+ t.image + i;} ]
//    {return s;}
//}

//
void SingleAttSFW() :
{/*@bgen(jjtree) SingleAttSFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLEATTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleAttSFW */
  try {
/*@egen*/
  < SELECT > Relation() [ < POINT > (Attribute()| < ALL >) ] [ JoinCell() ] [ < WHERE > Conditions() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String SingleAttSFW() :
//{Token t,p; String s,i;}
//{
//    t = < SELECT > i = Relation()
//    {s = t.image + i;}
//    [ t = < POINT > i = Attribute()
//    {s = s + t.image + i;} ]
//    [ i = JoinCell() {s = s + i;}]
//    [ t = < WHERE > i = Conditions()
//    {s = s + t.image + i;}]
//    {return s;}
//
//    | t = < SELECT > i = Relation()
//          {s = t.image + i;}
//          [ t = < POINT > p = < ALL>
//          {s = s + t.image + p.image;} ]
//          [ i = JoinCell() {s = s + i;}]
//          [ t = < WHERE > i = Conditions()
//          {s = s + t.image + i;}]
//          {return s;}
//
//}
//
void SelectList() :
{/*@bgen(jjtree) SelectList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectList */
  try {
/*@egen*/
  SelectItem()
  [
    (
      < COMMA > SelectItem()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String SelectList():
//{Token t; String i, s;}
//{
//    i = SelectItem()
//    {s = i;}
//    [
//      (
//        t = < COMMA > i = SelectItem()
//        {s = s + t.image + i;}
//      )
//    ]
//    {return s;}
//}

//
void SelectItem() :
{/*@bgen(jjtree) SelectItem */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectItem */
  try {
/*@egen*/
  Relation() [ < POINT > (Attribute()| < ALL >) ]
| Func() < LEFTPARENTHESES > Relation() [ < POINT > (Attribute()| < ALL >) ] < RIGHTPARENTHESES > [ < AS > Attribute() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//String SelectItem() :
//{Token t,p; String i,j,s;}
//{
//  i = Relation()
//  {s = i;}
//  [ t = < POINT > i = Attribute()
//  {s = s + t.image + i;} ]
//  {return s;}
//  |  i = Relation()
//      {s = i;}
//      [ t = < POINT > p = < ALL >
//      {s = s + t.image + p;} ]
//      {return s;}
//  | i = Func() t = < LEFTPARENTHESES > j = Relation()
//    {s = i + t.image + j;}
//    [ t = < POINT > i = Attribute()
//    {s = s + t.image + i;} ]
//    t = < RIGHTPARENTHESES >
//    {s = s + t.image;}
//    [ t = < AS > i = Attribute()
//    {s = s + t.image + i;} ]
//    {return s;}
//  | i = Func() t = < LEFTPARENTHESES > j = Relation()
//        {s = i + t.image + j;}
//        [ t = < POINT > p = < ALL >
//        {s = s + t.image + p.image;} ]
//        t = < RIGHTPARENTHESES >
//        {s = s + t.image;}
//        [ t = < AS > i = Attribute()
//        {s = s + t.image + i;} ]
//   {return s;}
//}

//
void JoinCell() :
{/*@bgen(jjtree) JoinCell */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINCELL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinCell */
  try {
/*@egen*/
  < JOIN > Joinname() < LEFTPARENTHESES > JoinAttrCondition() < RIGHTPARENTHESES > JoinItemList() [ JoinEquCondition() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String JoinCell() :
//{Token t,p,q; String i,j,k,l,s;}
//{
//    t = < JOIN > i = Joinname() p = < LEFTPARENTHESES > j = JoinAttrCondition() q = < RIGHTPARENTHESES > k = JoinItemList()
//    {s = t.image + i + p.image + j +q.image + k;}
//    [ l = JoinEquCondition()  {s = s + l;}]
//    {return s;}
//}

//
void JoinItemList() :
{/*@bgen(jjtree) JoinItemList */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinItemList */
  try {
/*@egen*/
  JoinItem()
  [
    (
      < COMMA > JoinItem()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String JoinItemList() :
//{String i,s; Token t;}
//{
//    i = JoinItem()
//    {s = i;}
//    [
//      (
//        t = < COMMA > i = JoinItem()
//        {s = s + t.image + i;}
//      )+
//    ]
//    {return s;}
//}
//
void JoinAttrCondition() :
{/*@bgen(jjtree) JoinAttrCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINATTRCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinAttrCondition */
  try {
/*@egen*/
  EquCondition()
  [
    (
      < COMMA > EquCondition()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String JoinAttrCondition() :
//{String i, s; Token t;}
//{
//    i = EquCondition()
//    {s = i;}
//    [
//      (t = < COMMA > i = EquCondition()
//      {s = s + t.image + i;})+
//    ]
//    {return s;}
//}
//
void EquCondition() :
{/*@bgen(jjtree) EquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EquCondition */
  try {
/*@egen*/
  Attribute() < EQUAL > Relation() [ < POINT > Attribute() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String EquCondition() :
//{String i,j; Token t; String s;}
//{
//    i = Attribute() t = < EQUAL > j = Relation()
//    {s = i + t.image + j;}
//    [
//      t = < POINT > i = Attribute()
//      {s = s + t.image + i;}
//    ]
//
//    {return s;}
//}
//
void JoinItem() :
{/*@bgen(jjtree) JoinItem */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinItem */
  try {
/*@egen*/
  Relation()
| SingleAttSFW()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String JoinItem() :
//{String i; String s;}
//{
//    i = SingleAttSFW()
//    {s = i;}
//    {return s;}
//
//    | i = Relation()
//      {s = i;}
//      {return s;}
//}

//
void JoinEquCondition() :
{/*@bgen(jjtree) JoinEquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JoinEquCondition */
  try {
/*@egen*/
  Relation() < POINT > Attribute() < EQUAL > Relation() < POINT > Attribute()
  [
    (
      < AND > Relation() < POINT > Attribute() < EQUAL > Relation() < POINT > Attribute()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String JoinEquCondition() :
//{String i,j,k,l; String s; Token t,p,q,r;}
//{
//    i = Relation() t = < POINT > j = Attribute() p = < EQUAL > k = Relation() q = < POINT > l = Attribute()
//    {s = i + t.image + j + p.image + k + q.image + l;}
//    [
//      (
//        r = < AND > i = Relation() t = < POINT > j = Attribute() p = < EQUAL > k = Relation() q = < POINT > l = Attribute()
//        {s = s + r.image + i + t.image + j + p.image + k + q.image + l;}
//      )+
//    ]
//
//    {return s;}
//}

//
void Func() :
{/*@bgen(jjtree) Func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Func */
  try {
/*@egen*/
  < COUNT >
| < SUM >
| < AVG >
| < MAX >
| < MIN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//String Func() :
//{Token t; }
//{
//    t = < COUNT >
//    {return t.image;}
//    | t = < SUM >
//    {return t.image;}
//    | t = < AVG >
//    {return t.image;}
//    | t = < MAX >
//    {return t.image;}
//    | t = < MIN >
//    {return t.image;}
//}

//
void Conditions() :
{/*@bgen(jjtree) Conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conditions */
  try {
/*@egen*/
  Condition()
  [
    (
      < AND > Condition()
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//String Conditions() :
//{Token t; String i; String j; String s;}
//{
//    i = Condition()
//    {s = i;}
//    [
//      (
//        t = < AND > j = Condition()
//        {s = s+ t.image + j;}
//      )+
//    ]
//    {return s;}
//}

//

void Condition() :
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  Relation() [ < POINT > Attribute() ] Action()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



//String Condition() :
//{String s; String i; String j; String k; Token t;}
//{
//    i = Relation()
//    {s = i;}
//    [
//        t = < POINT > j = Attribute()
//        {s = s + t.image + j;}
//    ]
//    k = Action()
//    {s = s + k;}
//
//    {return s;}

//}


void Action() :
{/*@bgen(jjtree) Action */
  SimpleNode jjtn000 = new SimpleNode(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Action */
  try {
/*@egen*/
  < EQUAL > Equal()
| < BETWEEN > Between() < AND > Between()
| < IN > < LEFTPARENTHESES > In() < RIGHTPARENTHESES >
| < HIGHER > Higher()
| < LOWER > Lower()
| < EHIGHER > Higher()
| < ELOWER > Lower()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//

//String Action() :
//{Token t; Token k; Token l; String s;String i; String j;}
//{
//    t = < EQUAL > i = Equal()
//    { s = t.image + i;}
//    {return s;}
//    | t = < BETWEEN > i = Between() k = < AND > j = Between()
//    { s = t.image + i + k.image + j;}
//    {return s;}
//    | t = < IN > k = < LEFTPARENTHESES > i = In() l = < RIGHTPARENTHESES >
//    {s = t.image + k.image + i + l.image; }
//    { return s; }
//    | t = < HIGHER > i = Higher()
//    {s = t.image + i; }
//    { return s; }
//    | t = < LOWER > i = Lower()
//    { s = t.image + i; }
//    {return s; }
//    | t = < EHIGHER > i = Higher()
//    {s = t.image + i; }
//    {return s;}
//    | t = < ELOWER > i = Lower()
//    {s = t.image + i;}
//    {return s;}
//}

//String Equal() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//  | s = Attribute()
//  { return s;}
//
//}
//
//String Between() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//}
void Equal() :
{/*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Equal */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()
| Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Between() :
{/*@bgen(jjtree) Between */
  SimpleNode jjtn000 = new SimpleNode(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Between */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//
void In() :
{/*@bgen(jjtree) In */
  SimpleNode jjtn000 = new SimpleNode(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) In */
  try {
/*@egen*/
  SFW()
| < LQUOTATION > IDENTIFIER() < LQUOTATION >
  [
    (
      < COMMA > < LQUOTATION > IDENTIFIER() < LQUOTATION >
    )+
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//String In() :
//{Token t; Token k; String s;String a;}
//{
//
//   a = SFW()
//   {s = a;}
//   {return s;}
//
//   | t = < LQUOTATION > a = IDENTIFIER() t = < LQUOTATION >
//     {s = t.image + a + t.image;}
//     [
//        (
//            k = < COMMA > t = < LQUOTATION > a = IDENTIFIER() t = < LQUOTATION >
//            {s = s + k.image + t.image + a + t.image;}
//         )+
//     ]
//
//   {return s;}
//
//}

//

//String Higher() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//
//}
////
//String Lower() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//
//}

void Higher() :
{/*@bgen(jjtree) Higher */
  SimpleNode jjtn000 = new SimpleNode(JJTHIGHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Higher */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Lower() :
{/*@bgen(jjtree) Lower */
  SimpleNode jjtn000 = new SimpleNode(JJTLOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lower */
  try {
/*@egen*/
  < INTEGER_LITERAL >
| < FLOAT_LITERAL >
| Pattern()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//
///*-------------------*/

/*-------------------*/
void Joinname() :
{/*@bgen(jjtree) Joinname */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Joinname */
  try {
/*@egen*/
  Attribute()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Attribute() :
{/*@bgen(jjtree) Attribute */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
  try {
/*@egen*/
  IDENTIFIER()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Relation() :
{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Relation */
  try {
/*@egen*/
  IDENTIFIER()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Pattern() :
{/*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/
  < LQUOTATION >
  (
    IDENTIFIER()
  | < STRDIGITS >
  )
  < LQUOTATION >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*-------------------*/
void IDENTIFIER() :
{/*@bgen(jjtree) IDENTIFIER */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
  try {
/*@egen*/
  < IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


//String Joinname() :
//{}
//{
//  {
//  return Attribute();
//  }
//}
////
//String Attribute() :
//{}
//{
//  {
//  return IDENTIFIER();
//  }
//}
////
//String Relation() :
//{}
//{
//  {
//  return IDENTIFIER();
//  }
//}
//
//
//String Pattern() :
//{Token t; Token k;String s;String i;}
//{
//    t = < LQUOTATION >
//    ( i = IDENTIFIER()
//     { s = t.image + i;}
//    | k = < STRDIGITS >
//     { s = t.image + k.image;}
//    )
//    t = < LQUOTATION >
//    {s = s+ t.image;}
//
//   {
//   return s;
//   }
//
//
//}
///*-------------------*/
//String IDENTIFIER() :
//{ Token t; }
//{
//  t = < IDENTIFIER >
//  {
//  return t.toString();
//  }
//}
//
